// <auto-generated />
using System;
using BookStoreApi.Presistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookStoreApi.Migrations
{
  [DbContext(typeof(BookStoreDbContext))]
  [Migration("20240520085421_initial migration")]
  partial class initialmigration
  {
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "8.0.5")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

      modelBuilder.Entity("BookStoreApi.Entities.AppUser", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<string>("Email")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Password")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Role")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Username")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.ToTable("app_user");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Author", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<int>("Age")
                      .HasColumnType("integer");

            b.Property<string>("City")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Country")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<int>("Rating")
                      .HasColumnType("integer");

            b.HasKey("Id");

            b.ToTable("author");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Book", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<Guid?>("AppUserId")
                      .HasColumnType("uuid");

            b.Property<Guid>("AuthorId")
                      .HasColumnType("uuid");

            b.Property<string>("Genre")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<DateOnly>("PublishedAt")
                      .HasColumnType("date")
                      .HasColumnName("published_at");

            b.Property<int>("Rating")
                      .HasColumnType("integer");

            b.Property<string>("Title")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("AppUserId");

            b.HasIndex("AuthorId");

            b.ToTable("Book");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Report", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<Guid?>("AuthorId")
                      .HasColumnType("uuid");

            b.Property<Guid>("BookId")
                      .HasColumnType("uuid");

            b.Property<string>("Content")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<Guid>("UserId")
                      .HasColumnType("uuid");

            b.HasKey("Id");

            b.HasIndex("AuthorId");

            b.HasIndex("BookId");

            b.HasIndex("UserId");

            b.ToTable("report");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Review", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<Guid?>("AuthorId")
                      .HasColumnType("uuid");

            b.Property<string>("Content")
                      .HasColumnType("text");

            b.Property<int>("Score")
                      .HasColumnType("integer");

            b.Property<Guid>("UserId")
                      .HasColumnType("uuid");

            b.Property<Guid>("bookId")
                      .HasColumnType("uuid");

            b.HasKey("Id");

            b.HasIndex("AuthorId");

            b.HasIndex("UserId");

            b.HasIndex("bookId");

            b.ToTable("review");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Book", b =>
          {
            b.HasOne("BookStoreApi.Entities.AppUser", null)
                      .WithMany("Books")
                      .HasForeignKey("AppUserId");

            b.HasOne("BookStoreApi.Entities.Author", "Author")
                      .WithMany("Books")
                      .HasForeignKey("AuthorId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Author");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Report", b =>
          {
            b.HasOne("BookStoreApi.Entities.Author", null)
                      .WithMany("Reports")
                      .HasForeignKey("AuthorId");

            b.HasOne("BookStoreApi.Entities.Book", "Book")
                      .WithMany("Reports")
                      .HasForeignKey("BookId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("BookStoreApi.Entities.AppUser", "User")
                      .WithMany("Reports")
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Book");

            b.Navigation("User");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Review", b =>
          {
            b.HasOne("BookStoreApi.Entities.Author", null)
                      .WithMany("Reviews")
                      .HasForeignKey("AuthorId");

            b.HasOne("BookStoreApi.Entities.AppUser", "User")
                      .WithMany("Reviews")
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("BookStoreApi.Entities.Book", "Book")
                      .WithMany("Reviews")
                      .HasForeignKey("bookId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("User");

            b.Navigation("Book");
          });

      modelBuilder.Entity("BookStoreApi.Entities.AppUser", b =>
          {
            b.Navigation("Books");

            b.Navigation("Reports");

            b.Navigation("Reviews");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Author", b =>
          {
            b.Navigation("Books");

            b.Navigation("Reports");

            b.Navigation("Reviews");
          });

      modelBuilder.Entity("BookStoreApi.Entities.Book", b =>
          {
            b.Navigation("Reports");

            b.Navigation("Reviews");
          });
#pragma warning restore 612, 618
    }
  }
}
